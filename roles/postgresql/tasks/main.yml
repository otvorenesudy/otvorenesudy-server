---
- name: Add keys for PostgreSQL repositories
  apt_key: url=https://www.postgresql.org/media/keys/ACCC4CF8.asc state=present

- name: Add certificates
  apt:
    name:
      - ca-certificates
    state: present

- name: Add PostgreSQL repositories
  apt_repository: repo='deb http://apt.postgresql.org/pub/repos/apt/ {{ ansible_distribution_release }}-pgdg main' state=present update_cache=yes

- name: Install PostgreSQL
  apt:
    name:
      - postgresql-{{ version }}
      - postgresql-contrib-{{ version }}
      - postgresql-client-{{ version }}
      - libpq5
      - python3-psycopg2
      - libpq-dev
    state: present
    force: yes

- name: Copy configuration files
  template: src=roles/postgresql/templates/{{ item.src }} dest=/etc/postgresql/{{ version }}/main/{{ item.dest }}
  with_items:
    - { src: postgresql.conf.j2, dest: postgresql.conf }
    - { src: pg_hba.conf.j2, dest: pg_hba.conf }
  notify:
    - Restart PostgreSQL

- name: Create PostreSQL users
  postgresql_user:
    name: "{{ item }}"
    password: "{{ lookup('password', '/tmp/' + item + '.pgpassword chars=hexdigits') }}"
    role_attr_flags: SUPERUSER
    state: present
  with_items: "{{ users }}"
  become_user: "postgres"
  when: users|length > 0

- name: Export PostgreSQL user names as ENV variables
  become_user: "{{ user }}"
  lineinfile:
    dest: ~/.env
    regexp: '^{{ item | upper }}_DATABASE_USER='
    line: '{{ item | upper }}_DATABASE_USER={{ item }}'
    state: present
  with_items: "{{ users }}"
  when: users|length > 0

- name: Export PostgreSQL user passwords as ENV variables
  become_user: "{{ user }}"
  lineinfile:
    dest: ~/.env
    regexp: "^{{ item | upper }}_DATABASE_PASSWORD="
    line: "{{ item | upper }}_DATABASE_PASSWORD={{ lookup('file', '/tmp/' + item + '.pgpassword') }}"
    state: present
  with_items: "{{ users }}"
  when: users|length > 0
